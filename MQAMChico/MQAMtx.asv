%MQAM

%Set up variables and workspace.
close all;
clear;
clc;
fclose('all');
%Initialize variables
fs=44100; %Sampling frequency

gb_length=20;
ts_length=50;
Nb=1000; %Number of bits to transmit

ts = randint(ts_length,1,2);

gb = randint(gb_length,1,2);
data = randint(Nb,1,2);

levels = 2;

left = rem(Nb+ts_length+gb_length,2*levels);

data = [gb' ts' data' (zeros(2*levels-left,1))'];
L=length(data);


f1=12000;

n_bit=25;
n_sym=n_bit*2*levels;
%n_bit = n_sym/(2*levels);
Ts=n_sym/fs;

symbol=ones(1,n_sym);

mx=[];my=[];

x=0;
y=0;

%
for n=0:2*levels:L-2*levels
    bit=[];
    xi=0;
    yi=0;
    
    for m= 1:2:2*levels
        if data(n+m)==0      
            xi=xi+(2^((m-1)/2));
            
        else
            xi=xi-(2^((m-1)/2));
            
        end
        if data(n+m+1)==0
            yi=yi+(2^((m-1)/2));
            
        else
            yi=yi-(2^((m-1)/2));
            
        end
    end
    
    x=xi*symbol;
    y=yi*symbol;
    
    mx=[mx x];
    my=[my y];
    
    
end

v=0:2*pi/fs:2*pi*(n_sym/fs-1/fs);

mconst = mx + my*1i;
qam=[];
for(k=1:length(data)/(2*levels))
qam=[qam real(mconst((k-1)*n_sym+1:k*n_sym)).*cos(f1*v)-imag(mconst((k-1)*n_sym+1:k*n_sym)).*sin(f1*v)];
end
ts_mod=qam()
scatterplot(mconst),grid,xlabel('I'),ylabel('Q'),title('Constellation before sending');

mod_signal=qam/(max(abs(qam)+0.00001));
wavwrite(mod_signal, fs, 'mod_signal.wav');
create_file_of_shorts('test_signal.dat',mod_signal*2^5)
copy_file_from_working_directory_to_sdcard( 'test_signal.dat' );
save('MQAM.mat','Nb','levels','f1','data','n_bit','v');
save('ts.mat','ts')
mod_signal_length = length(mod_signal)/fs; % Length of modulated signal in seconds

fprintf('Modulated signal: %g seconds long \n',mod_signal_length)


